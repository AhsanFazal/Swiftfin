//
// AllOfAuthenticationResultSessionInfo.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Class SessionInfo. */

public struct AllOfAuthenticationResultSessionInfo: Codable {

    public var playState: Any?
    public var additionalUsers: [SessionUserInfo]?
    public var capabilities: Any?
    /** Gets or sets the remote end point. */
    public var remoteEndPoint: String?
    /** Gets or sets the playable media types. */
    public var playableMediaTypes: [String]?
    /** Gets or sets the id. */
    public var _id: String?
    /** Gets or sets the user id. */
    public var userId: UUID?
    /** Gets or sets the username. */
    public var userName: String?
    /** Gets or sets the type of the client. */
    public var client: String?
    /** Gets or sets the last activity date. */
    public var lastActivityDate: Date?
    /** Gets or sets the last playback check in. */
    public var lastPlaybackCheckIn: Date?
    /** Gets or sets the name of the device. */
    public var deviceName: String?
    /** Gets or sets the type of the device. */
    public var deviceType: String?
    /** Gets or sets the now playing item. */
    public var nowPlayingItem: Any?
    /** Class BaseItem. */
    public var fullNowPlayingItem: Any?
    /** This is strictly used as a data transfer object from the api layer.  This holds information about a BaseItem in a format that is convenient for the client. */
    public var nowViewingItem: Any?
    /** Gets or sets the device id. */
    public var deviceId: String?
    /** Gets or sets the application version. */
    public var applicationVersion: String?
    public var transcodingInfo: Any?
    /** Gets a value indicating whether this instance is active. */
    public var isActive: Bool?
    public var supportsMediaControl: Bool?
    public var supportsRemoteControl: Bool?
    public var nowPlayingQueue: [QueueItem]?
    public var hasCustomDeviceName: Bool?
    public var playlistItemId: String?
    public var serverId: String?
    public var userPrimaryImageTag: String?
    /** Gets or sets the supported commands. */
    public var supportedCommands: [GeneralCommandType]?

    public init(playState: Any? = nil, additionalUsers: [SessionUserInfo]? = nil, capabilities: Any? = nil, remoteEndPoint: String? = nil, playableMediaTypes: [String]? = nil, _id: String? = nil, userId: UUID? = nil, userName: String? = nil, client: String? = nil, lastActivityDate: Date? = nil, lastPlaybackCheckIn: Date? = nil, deviceName: String? = nil, deviceType: String? = nil, nowPlayingItem: Any? = nil, fullNowPlayingItem: Any? = nil, nowViewingItem: Any? = nil, deviceId: String? = nil, applicationVersion: String? = nil, transcodingInfo: Any? = nil, isActive: Bool? = nil, supportsMediaControl: Bool? = nil, supportsRemoteControl: Bool? = nil, nowPlayingQueue: [QueueItem]? = nil, hasCustomDeviceName: Bool? = nil, playlistItemId: String? = nil, serverId: String? = nil, userPrimaryImageTag: String? = nil, supportedCommands: [GeneralCommandType]? = nil) {
        self.playState = playState
        self.additionalUsers = additionalUsers
        self.capabilities = capabilities
        self.remoteEndPoint = remoteEndPoint
        self.playableMediaTypes = playableMediaTypes
        self._id = _id
        self.userId = userId
        self.userName = userName
        self.client = client
        self.lastActivityDate = lastActivityDate
        self.lastPlaybackCheckIn = lastPlaybackCheckIn
        self.deviceName = deviceName
        self.deviceType = deviceType
        self.nowPlayingItem = nowPlayingItem
        self.fullNowPlayingItem = fullNowPlayingItem
        self.nowViewingItem = nowViewingItem
        self.deviceId = deviceId
        self.applicationVersion = applicationVersion
        self.transcodingInfo = transcodingInfo
        self.isActive = isActive
        self.supportsMediaControl = supportsMediaControl
        self.supportsRemoteControl = supportsRemoteControl
        self.nowPlayingQueue = nowPlayingQueue
        self.hasCustomDeviceName = hasCustomDeviceName
        self.playlistItemId = playlistItemId
        self.serverId = serverId
        self.userPrimaryImageTag = userPrimaryImageTag
        self.supportedCommands = supportedCommands
    }

    public enum CodingKeys: String, CodingKey { 
        case playState = "PlayState"
        case additionalUsers = "AdditionalUsers"
        case capabilities = "Capabilities"
        case remoteEndPoint = "RemoteEndPoint"
        case playableMediaTypes = "PlayableMediaTypes"
        case _id = "Id"
        case userId = "UserId"
        case userName = "UserName"
        case client = "Client"
        case lastActivityDate = "LastActivityDate"
        case lastPlaybackCheckIn = "LastPlaybackCheckIn"
        case deviceName = "DeviceName"
        case deviceType = "DeviceType"
        case nowPlayingItem = "NowPlayingItem"
        case fullNowPlayingItem = "FullNowPlayingItem"
        case nowViewingItem = "NowViewingItem"
        case deviceId = "DeviceId"
        case applicationVersion = "ApplicationVersion"
        case transcodingInfo = "TranscodingInfo"
        case isActive = "IsActive"
        case supportsMediaControl = "SupportsMediaControl"
        case supportsRemoteControl = "SupportsRemoteControl"
        case nowPlayingQueue = "NowPlayingQueue"
        case hasCustomDeviceName = "HasCustomDeviceName"
        case playlistItemId = "PlaylistItemId"
        case serverId = "ServerId"
        case userPrimaryImageTag = "UserPrimaryImageTag"
        case supportedCommands = "SupportedCommands"
    }

}
