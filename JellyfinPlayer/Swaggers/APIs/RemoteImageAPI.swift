//
// RemoteImageAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class RemoteImageAPI {
    /**
     Downloads a remote image for an item.

     - parameter itemId: (path) Item Id. 
     - parameter type: (query) The image type. 
     - parameter imageUrl: (query) The image url. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func downloadRemoteImage(itemId: UUID, type: Type2, imageUrl: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        downloadRemoteImageWithRequestBuilder(itemId: itemId, type: type, imageUrl: imageUrl).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Downloads a remote image for an item.
     - POST /Items/{itemId}/RemoteImages/Download
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter itemId: (path) Item Id. 
     - parameter type: (query) The image type. 
     - parameter imageUrl: (query) The image url. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func downloadRemoteImageWithRequestBuilder(itemId: UUID, type: Type2, imageUrl: String? = nil) -> RequestBuilder<Void> {
        var path = "/Items/{itemId}/RemoteImages/Download"
        let itemIdPreEscape = "\(itemId)"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "type": type, 
                        "imageUrl": imageUrl
        ])


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets available remote image providers for an item.

     - parameter itemId: (path) Item Id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRemoteImageProviders(itemId: UUID, completion: @escaping ((_ data: [ImageProviderInfo]?,_ error: Error?) -> Void)) {
        getRemoteImageProvidersWithRequestBuilder(itemId: itemId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets available remote image providers for an item.
     - GET /Items/{itemId}/RemoteImages/Providers
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - examples: [{contentType=application/json, example=[ {
  "SupportedImages" : [ "Primary", "Primary" ],
  "Name" : "Name"
}, {
  "SupportedImages" : [ "Primary", "Primary" ],
  "Name" : "Name"
} ]}]
     - parameter itemId: (path) Item Id. 

     - returns: RequestBuilder<[ImageProviderInfo]> 
     */
    open class func getRemoteImageProvidersWithRequestBuilder(itemId: UUID) -> RequestBuilder<[ImageProviderInfo]> {
        var path = "/Items/{itemId}/RemoteImages/Providers"
        let itemIdPreEscape = "\(itemId)"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[ImageProviderInfo]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets available remote images for an item.

     - parameter itemId: (path) Item Id. 
     - parameter type: (query) The image type. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return. (optional)
     - parameter providerName: (query) Optional. The image provider to use. (optional)
     - parameter includeAllLanguages: (query) Optional. Include all languages. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRemoteImages(itemId: UUID, type: Type1? = nil, startIndex: Int? = nil, limit: Int? = nil, providerName: String? = nil, includeAllLanguages: Bool? = nil, completion: @escaping ((_ data: RemoteImageResult?,_ error: Error?) -> Void)) {
        getRemoteImagesWithRequestBuilder(itemId: itemId, type: type, startIndex: startIndex, limit: limit, providerName: providerName, includeAllLanguages: includeAllLanguages).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets available remote images for an item.
     - GET /Items/{itemId}/RemoteImages
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - examples: [{contentType=application/json, example={
  "TotalRecordCount" : 5,
  "Images" : [ {
    "ProviderName" : "ProviderName",
    "Type" : "",
    "ThumbnailUrl" : "ThumbnailUrl",
    "Language" : "Language",
    "RatingType" : "",
    "VoteCount" : 5,
    "CommunityRating" : 1.4658129805029452,
    "Height" : 0,
    "Width" : 6,
    "Url" : "Url"
  }, {
    "ProviderName" : "ProviderName",
    "Type" : "",
    "ThumbnailUrl" : "ThumbnailUrl",
    "Language" : "Language",
    "RatingType" : "",
    "VoteCount" : 5,
    "CommunityRating" : 1.4658129805029452,
    "Height" : 0,
    "Width" : 6,
    "Url" : "Url"
  } ],
  "Providers" : [ "Providers", "Providers" ]
}}]
     - parameter itemId: (path) Item Id. 
     - parameter type: (query) The image type. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return. (optional)
     - parameter providerName: (query) Optional. The image provider to use. (optional)
     - parameter includeAllLanguages: (query) Optional. Include all languages. (optional, default to false)

     - returns: RequestBuilder<RemoteImageResult> 
     */
    open class func getRemoteImagesWithRequestBuilder(itemId: UUID, type: Type1? = nil, startIndex: Int? = nil, limit: Int? = nil, providerName: String? = nil, includeAllLanguages: Bool? = nil) -> RequestBuilder<RemoteImageResult> {
        var path = "/Items/{itemId}/RemoteImages"
        let itemIdPreEscape = "\(itemId)"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "type": type, 
                        "startIndex": startIndex?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON(), 
                        "providerName": providerName, 
                        "includeAllLanguages": includeAllLanguages
        ])


        let requestBuilder: RequestBuilder<RemoteImageResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
