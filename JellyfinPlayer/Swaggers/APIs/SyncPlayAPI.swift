//
// SyncPlayAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class SyncPlayAPI {
    /**
     Notify SyncPlay group that member is buffering.

     - parameter body: (body) The player status. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func syncPlayBuffering(body: SyncPlayBufferingBody, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        syncPlayBufferingWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Notify SyncPlay group that member is buffering.
     - POST /SyncPlay/Buffering
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter body: (body) The player status. 

     - returns: RequestBuilder<Void> 
     */
    open class func syncPlayBufferingWithRequestBuilder(body: SyncPlayBufferingBody) -> RequestBuilder<Void> {
        let path = "/SyncPlay/Buffering"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create a new SyncPlay group.

     - parameter body: (body) The settings of the new group. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func syncPlayCreateGroup(body: SyncPlayNewBody, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        syncPlayCreateGroupWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create a new SyncPlay group.
     - POST /SyncPlay/New
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter body: (body) The settings of the new group. 

     - returns: RequestBuilder<Void> 
     */
    open class func syncPlayCreateGroupWithRequestBuilder(body: SyncPlayNewBody) -> RequestBuilder<Void> {
        let path = "/SyncPlay/New"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Gets all SyncPlay groups.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func syncPlayGetGroups(completion: @escaping ((_ data: [GroupInfoDto]?,_ error: Error?) -> Void)) {
        syncPlayGetGroupsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets all SyncPlay groups.
     - GET /SyncPlay/List
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - examples: [{contentType=application/json, example=[ {
  "GroupName" : "GroupName",
  "LastUpdatedAt" : "2000-01-23T04:56:07.000+00:00",
  "State" : "",
  "Participants" : [ "Participants", "Participants" ],
  "GroupId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
}, {
  "GroupName" : "GroupName",
  "LastUpdatedAt" : "2000-01-23T04:56:07.000+00:00",
  "State" : "",
  "Participants" : [ "Participants", "Participants" ],
  "GroupId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
} ]}]

     - returns: RequestBuilder<[GroupInfoDto]> 
     */
    open class func syncPlayGetGroupsWithRequestBuilder() -> RequestBuilder<[GroupInfoDto]> {
        let path = "/SyncPlay/List"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[GroupInfoDto]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Join an existing SyncPlay group.

     - parameter body: (body) The group to join. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func syncPlayJoinGroup(body: SyncPlayJoinBody, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        syncPlayJoinGroupWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Join an existing SyncPlay group.
     - POST /SyncPlay/Join
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter body: (body) The group to join. 

     - returns: RequestBuilder<Void> 
     */
    open class func syncPlayJoinGroupWithRequestBuilder(body: SyncPlayJoinBody) -> RequestBuilder<Void> {
        let path = "/SyncPlay/Join"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Leave the joined SyncPlay group.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func syncPlayLeaveGroup(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        syncPlayLeaveGroupWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Leave the joined SyncPlay group.
     - POST /SyncPlay/Leave
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication

     - returns: RequestBuilder<Void> 
     */
    open class func syncPlayLeaveGroupWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/SyncPlay/Leave"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Request to move an item in the playlist in SyncPlay group.

     - parameter body: (body) The new position for the item. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func syncPlayMovePlaylistItem(body: SyncPlayMovePlaylistItemBody, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        syncPlayMovePlaylistItemWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Request to move an item in the playlist in SyncPlay group.
     - POST /SyncPlay/MovePlaylistItem
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter body: (body) The new position for the item. 

     - returns: RequestBuilder<Void> 
     */
    open class func syncPlayMovePlaylistItemWithRequestBuilder(body: SyncPlayMovePlaylistItemBody) -> RequestBuilder<Void> {
        let path = "/SyncPlay/MovePlaylistItem"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Request next item in SyncPlay group.

     - parameter body: (body) The current item information. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func syncPlayNextItem(body: SyncPlayNextItemBody, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        syncPlayNextItemWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Request next item in SyncPlay group.
     - POST /SyncPlay/NextItem
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter body: (body) The current item information. 

     - returns: RequestBuilder<Void> 
     */
    open class func syncPlayNextItemWithRequestBuilder(body: SyncPlayNextItemBody) -> RequestBuilder<Void> {
        let path = "/SyncPlay/NextItem"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Request pause in SyncPlay group.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func syncPlayPause(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        syncPlayPauseWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Request pause in SyncPlay group.
     - POST /SyncPlay/Pause
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication

     - returns: RequestBuilder<Void> 
     */
    open class func syncPlayPauseWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/SyncPlay/Pause"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Update session ping.

     - parameter body: (body) The new ping. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func syncPlayPing(body: SyncPlayPingBody, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        syncPlayPingWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update session ping.
     - POST /SyncPlay/Ping
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter body: (body) The new ping. 

     - returns: RequestBuilder<Void> 
     */
    open class func syncPlayPingWithRequestBuilder(body: SyncPlayPingBody) -> RequestBuilder<Void> {
        let path = "/SyncPlay/Ping"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Request previous item in SyncPlay group.

     - parameter body: (body) The current item information. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func syncPlayPreviousItem(body: SyncPlayPreviousItemBody, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        syncPlayPreviousItemWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Request previous item in SyncPlay group.
     - POST /SyncPlay/PreviousItem
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter body: (body) The current item information. 

     - returns: RequestBuilder<Void> 
     */
    open class func syncPlayPreviousItemWithRequestBuilder(body: SyncPlayPreviousItemBody) -> RequestBuilder<Void> {
        let path = "/SyncPlay/PreviousItem"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Request to queue items to the playlist of a SyncPlay group.

     - parameter body: (body) The items to add. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func syncPlayQueue(body: SyncPlayQueueBody, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        syncPlayQueueWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Request to queue items to the playlist of a SyncPlay group.
     - POST /SyncPlay/Queue
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter body: (body) The items to add. 

     - returns: RequestBuilder<Void> 
     */
    open class func syncPlayQueueWithRequestBuilder(body: SyncPlayQueueBody) -> RequestBuilder<Void> {
        let path = "/SyncPlay/Queue"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Notify SyncPlay group that member is ready for playback.

     - parameter body: (body) The player status. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func syncPlayReady(body: SyncPlayReadyBody, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        syncPlayReadyWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Notify SyncPlay group that member is ready for playback.
     - POST /SyncPlay/Ready
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter body: (body) The player status. 

     - returns: RequestBuilder<Void> 
     */
    open class func syncPlayReadyWithRequestBuilder(body: SyncPlayReadyBody) -> RequestBuilder<Void> {
        let path = "/SyncPlay/Ready"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Request to remove items from the playlist in SyncPlay group.

     - parameter body: (body) The items to remove. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func syncPlayRemoveFromPlaylist(body: SyncPlayRemoveFromPlaylistBody, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        syncPlayRemoveFromPlaylistWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Request to remove items from the playlist in SyncPlay group.
     - POST /SyncPlay/RemoveFromPlaylist
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter body: (body) The items to remove. 

     - returns: RequestBuilder<Void> 
     */
    open class func syncPlayRemoveFromPlaylistWithRequestBuilder(body: SyncPlayRemoveFromPlaylistBody) -> RequestBuilder<Void> {
        let path = "/SyncPlay/RemoveFromPlaylist"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Request seek in SyncPlay group.

     - parameter body: (body) The new playback position. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func syncPlaySeek(body: SyncPlaySeekBody, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        syncPlaySeekWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Request seek in SyncPlay group.
     - POST /SyncPlay/Seek
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter body: (body) The new playback position. 

     - returns: RequestBuilder<Void> 
     */
    open class func syncPlaySeekWithRequestBuilder(body: SyncPlaySeekBody) -> RequestBuilder<Void> {
        let path = "/SyncPlay/Seek"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Request SyncPlay group to ignore member during group-wait.

     - parameter body: (body) The settings to set. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func syncPlaySetIgnoreWait(body: SyncPlaySetIgnoreWaitBody, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        syncPlaySetIgnoreWaitWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Request SyncPlay group to ignore member during group-wait.
     - POST /SyncPlay/SetIgnoreWait
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter body: (body) The settings to set. 

     - returns: RequestBuilder<Void> 
     */
    open class func syncPlaySetIgnoreWaitWithRequestBuilder(body: SyncPlaySetIgnoreWaitBody) -> RequestBuilder<Void> {
        let path = "/SyncPlay/SetIgnoreWait"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Request to set new playlist in SyncPlay group.

     - parameter body: (body) The new playlist to play in the group. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func syncPlaySetNewQueue(body: SyncPlaySetNewQueueBody, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        syncPlaySetNewQueueWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Request to set new playlist in SyncPlay group.
     - POST /SyncPlay/SetNewQueue
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter body: (body) The new playlist to play in the group. 

     - returns: RequestBuilder<Void> 
     */
    open class func syncPlaySetNewQueueWithRequestBuilder(body: SyncPlaySetNewQueueBody) -> RequestBuilder<Void> {
        let path = "/SyncPlay/SetNewQueue"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Request to change playlist item in SyncPlay group.

     - parameter body: (body) The new item to play. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func syncPlaySetPlaylistItem(body: SyncPlaySetPlaylistItemBody, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        syncPlaySetPlaylistItemWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Request to change playlist item in SyncPlay group.
     - POST /SyncPlay/SetPlaylistItem
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter body: (body) The new item to play. 

     - returns: RequestBuilder<Void> 
     */
    open class func syncPlaySetPlaylistItemWithRequestBuilder(body: SyncPlaySetPlaylistItemBody) -> RequestBuilder<Void> {
        let path = "/SyncPlay/SetPlaylistItem"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Request to set repeat mode in SyncPlay group.

     - parameter body: (body) The new repeat mode. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func syncPlaySetRepeatMode(body: SyncPlaySetRepeatModeBody, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        syncPlaySetRepeatModeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Request to set repeat mode in SyncPlay group.
     - POST /SyncPlay/SetRepeatMode
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter body: (body) The new repeat mode. 

     - returns: RequestBuilder<Void> 
     */
    open class func syncPlaySetRepeatModeWithRequestBuilder(body: SyncPlaySetRepeatModeBody) -> RequestBuilder<Void> {
        let path = "/SyncPlay/SetRepeatMode"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Request to set shuffle mode in SyncPlay group.

     - parameter body: (body) The new shuffle mode. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func syncPlaySetShuffleMode(body: SyncPlaySetShuffleModeBody, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        syncPlaySetShuffleModeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Request to set shuffle mode in SyncPlay group.
     - POST /SyncPlay/SetShuffleMode
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter body: (body) The new shuffle mode. 

     - returns: RequestBuilder<Void> 
     */
    open class func syncPlaySetShuffleModeWithRequestBuilder(body: SyncPlaySetShuffleModeBody) -> RequestBuilder<Void> {
        let path = "/SyncPlay/SetShuffleMode"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Request stop in SyncPlay group.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func syncPlayStop(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        syncPlayStopWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Request stop in SyncPlay group.
     - POST /SyncPlay/Stop
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication

     - returns: RequestBuilder<Void> 
     */
    open class func syncPlayStopWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/SyncPlay/Stop"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Request unpause in SyncPlay group.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func syncPlayUnpause(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        syncPlayUnpauseWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Request unpause in SyncPlay group.
     - POST /SyncPlay/Unpause
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication

     - returns: RequestBuilder<Void> 
     */
    open class func syncPlayUnpauseWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/SyncPlay/Unpause"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
