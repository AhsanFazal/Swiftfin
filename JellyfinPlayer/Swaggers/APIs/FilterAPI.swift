//
// FilterAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class FilterAPI {
    /**
     Gets query filters.

     - parameter userId: (query) Optional. User id. (optional)
     - parameter parentId: (query) Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     - parameter includeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     - parameter isAiring: (query) Optional. Is item airing. (optional)
     - parameter isMovie: (query) Optional. Is item movie. (optional)
     - parameter isSports: (query) Optional. Is item sports. (optional)
     - parameter isKids: (query) Optional. Is item kids. (optional)
     - parameter isNews: (query) Optional. Is item news. (optional)
     - parameter isSeries: (query) Optional. Is item series. (optional)
     - parameter recursive: (query) Optional. Search recursive. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQueryFilters(userId: UUID? = nil, parentId: UUID? = nil, includeItemTypes: [String]? = nil, isAiring: Bool? = nil, isMovie: Bool? = nil, isSports: Bool? = nil, isKids: Bool? = nil, isNews: Bool? = nil, isSeries: Bool? = nil, recursive: Bool? = nil, completion: @escaping ((_ data: QueryFilters?,_ error: Error?) -> Void)) {
        getQueryFiltersWithRequestBuilder(userId: userId, parentId: parentId, includeItemTypes: includeItemTypes, isAiring: isAiring, isMovie: isMovie, isSports: isSports, isKids: isKids, isNews: isNews, isSeries: isSeries, recursive: recursive).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets query filters.
     - GET /Items/Filters2
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - examples: [{contentType=application/json, example={
  "Genres" : [ {
    "Id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "Name" : "Name"
  }, {
    "Id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "Name" : "Name"
  } ],
  "Tags" : [ "Tags", "Tags" ]
}}]
     - parameter userId: (query) Optional. User id. (optional)
     - parameter parentId: (query) Optional. Specify this to localize the search to a specific item or folder. Omit to use the root. (optional)
     - parameter includeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     - parameter isAiring: (query) Optional. Is item airing. (optional)
     - parameter isMovie: (query) Optional. Is item movie. (optional)
     - parameter isSports: (query) Optional. Is item sports. (optional)
     - parameter isKids: (query) Optional. Is item kids. (optional)
     - parameter isNews: (query) Optional. Is item news. (optional)
     - parameter isSeries: (query) Optional. Is item series. (optional)
     - parameter recursive: (query) Optional. Search recursive. (optional)

     - returns: RequestBuilder<QueryFilters> 
     */
    open class func getQueryFiltersWithRequestBuilder(userId: UUID? = nil, parentId: UUID? = nil, includeItemTypes: [String]? = nil, isAiring: Bool? = nil, isMovie: Bool? = nil, isSports: Bool? = nil, isKids: Bool? = nil, isNews: Bool? = nil, isSeries: Bool? = nil, recursive: Bool? = nil) -> RequestBuilder<QueryFilters> {
        let path = "/Items/Filters2"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "userId": userId, 
                        "parentId": parentId, 
                        "includeItemTypes": includeItemTypes, 
                        "isAiring": isAiring, 
                        "isMovie": isMovie, 
                        "isSports": isSports, 
                        "isKids": isKids, 
                        "isNews": isNews, 
                        "isSeries": isSeries, 
                        "recursive": recursive
        ])


        let requestBuilder: RequestBuilder<QueryFilters>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets legacy query filters.

     - parameter userId: (query) Optional. User id. (optional)
     - parameter parentId: (query) Optional. Parent id. (optional)
     - parameter includeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     - parameter mediaTypes: (query) Optional. Filter by MediaType. Allows multiple, comma delimited. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQueryFiltersLegacy(userId: UUID? = nil, parentId: UUID? = nil, includeItemTypes: [String]? = nil, mediaTypes: [String]? = nil, completion: @escaping ((_ data: QueryFiltersLegacy?,_ error: Error?) -> Void)) {
        getQueryFiltersLegacyWithRequestBuilder(userId: userId, parentId: parentId, includeItemTypes: includeItemTypes, mediaTypes: mediaTypes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets legacy query filters.
     - GET /Items/Filters
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - examples: [{contentType=application/json, example={
  "Years" : [ 0, 0 ],
  "OfficialRatings" : [ "OfficialRatings", "OfficialRatings" ],
  "Genres" : [ "Genres", "Genres" ],
  "Tags" : [ "Tags", "Tags" ]
}}]
     - parameter userId: (query) Optional. User id. (optional)
     - parameter parentId: (query) Optional. Parent id. (optional)
     - parameter includeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited. (optional)
     - parameter mediaTypes: (query) Optional. Filter by MediaType. Allows multiple, comma delimited. (optional)

     - returns: RequestBuilder<QueryFiltersLegacy> 
     */
    open class func getQueryFiltersLegacyWithRequestBuilder(userId: UUID? = nil, parentId: UUID? = nil, includeItemTypes: [String]? = nil, mediaTypes: [String]? = nil) -> RequestBuilder<QueryFiltersLegacy> {
        let path = "/Items/Filters"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "userId": userId, 
                        "parentId": parentId, 
                        "includeItemTypes": includeItemTypes, 
                        "mediaTypes": mediaTypes
        ])


        let requestBuilder: RequestBuilder<QueryFiltersLegacy>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
