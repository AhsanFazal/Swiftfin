//
// ImageByNameAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ImageByNameAPI {
    /**
     Get General Image.

     - parameter name: (path) The name of the image. 
     - parameter type: (path) Image Type (primary, backdrop, logo, etc). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGeneralImage(name: String, type: String, completion: @escaping ((_ data: Data?,_ error: Error?) -> Void)) {
        getGeneralImageWithRequestBuilder(name: name, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get General Image.
     - GET /Images/General/{name}/{type}
     - 

     - examples: [{contentType=application/json, example=""}]
     - parameter name: (path) The name of the image. 
     - parameter type: (path) Image Type (primary, backdrop, logo, etc). 

     - returns: RequestBuilder<Data> 
     */
    open class func getGeneralImageWithRequestBuilder(name: String, type: String) -> RequestBuilder<Data> {
        var path = "/Images/General/{name}/{type}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Data>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get all general images.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGeneralImages(completion: @escaping ((_ data: [ImageByNameInfo]?,_ error: Error?) -> Void)) {
        getGeneralImagesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all general images.
     - GET /Images/General
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - examples: [{contentType=application/json, example=[ {
  "Context" : "Context",
  "Format" : "Format",
  "Theme" : "Theme",
  "Name" : "Name",
  "FileLength" : 0
}, {
  "Context" : "Context",
  "Format" : "Format",
  "Theme" : "Theme",
  "Name" : "Name",
  "FileLength" : 0
} ]}]

     - returns: RequestBuilder<[ImageByNameInfo]> 
     */
    open class func getGeneralImagesWithRequestBuilder() -> RequestBuilder<[ImageByNameInfo]> {
        let path = "/Images/General"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[ImageByNameInfo]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get media info image.

     - parameter theme: (path) The theme to get the image from. 
     - parameter name: (path) The name of the image. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMediaInfoImage(theme: String, name: String, completion: @escaping ((_ data: Data?,_ error: Error?) -> Void)) {
        getMediaInfoImageWithRequestBuilder(theme: theme, name: name).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get media info image.
     - GET /Images/MediaInfo/{theme}/{name}
     - 

     - examples: [{contentType=application/json, example=""}]
     - parameter theme: (path) The theme to get the image from. 
     - parameter name: (path) The name of the image. 

     - returns: RequestBuilder<Data> 
     */
    open class func getMediaInfoImageWithRequestBuilder(theme: String, name: String) -> RequestBuilder<Data> {
        var path = "/Images/MediaInfo/{theme}/{name}"
        let themePreEscape = "\(theme)"
        let themePostEscape = themePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{theme}", with: themePostEscape, options: .literal, range: nil)
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Data>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get all media info images.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMediaInfoImages(completion: @escaping ((_ data: [ImageByNameInfo]?,_ error: Error?) -> Void)) {
        getMediaInfoImagesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all media info images.
     - GET /Images/MediaInfo
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - examples: [{contentType=application/json, example=[ {
  "Context" : "Context",
  "Format" : "Format",
  "Theme" : "Theme",
  "Name" : "Name",
  "FileLength" : 0
}, {
  "Context" : "Context",
  "Format" : "Format",
  "Theme" : "Theme",
  "Name" : "Name",
  "FileLength" : 0
} ]}]

     - returns: RequestBuilder<[ImageByNameInfo]> 
     */
    open class func getMediaInfoImagesWithRequestBuilder() -> RequestBuilder<[ImageByNameInfo]> {
        let path = "/Images/MediaInfo"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[ImageByNameInfo]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get rating image.

     - parameter theme: (path) The theme to get the image from. 
     - parameter name: (path) The name of the image. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRatingImage(theme: String, name: String, completion: @escaping ((_ data: Data?,_ error: Error?) -> Void)) {
        getRatingImageWithRequestBuilder(theme: theme, name: name).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get rating image.
     - GET /Images/Ratings/{theme}/{name}
     - 

     - examples: [{contentType=application/json, example=""}]
     - parameter theme: (path) The theme to get the image from. 
     - parameter name: (path) The name of the image. 

     - returns: RequestBuilder<Data> 
     */
    open class func getRatingImageWithRequestBuilder(theme: String, name: String) -> RequestBuilder<Data> {
        var path = "/Images/Ratings/{theme}/{name}"
        let themePreEscape = "\(theme)"
        let themePostEscape = themePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{theme}", with: themePostEscape, options: .literal, range: nil)
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Data>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get all general images.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRatingImages(completion: @escaping ((_ data: [ImageByNameInfo]?,_ error: Error?) -> Void)) {
        getRatingImagesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all general images.
     - GET /Images/Ratings
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - examples: [{contentType=application/json, example=[ {
  "Context" : "Context",
  "Format" : "Format",
  "Theme" : "Theme",
  "Name" : "Name",
  "FileLength" : 0
}, {
  "Context" : "Context",
  "Format" : "Format",
  "Theme" : "Theme",
  "Name" : "Name",
  "FileLength" : 0
} ]}]

     - returns: RequestBuilder<[ImageByNameInfo]> 
     */
    open class func getRatingImagesWithRequestBuilder() -> RequestBuilder<[ImageByNameInfo]> {
        let path = "/Images/Ratings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[ImageByNameInfo]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
