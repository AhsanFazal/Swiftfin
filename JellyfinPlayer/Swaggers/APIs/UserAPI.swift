//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class UserAPI {
    /**
     Authenticates a user.

     - parameter userId: (path) The user id. 
     - parameter pw: (query) The password as plain text. 
     - parameter password: (query) The password sha1-hash. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authenticateUser(userId: UUID, pw: String, password: String? = nil, completion: @escaping ((_ data: AuthenticationResult?,_ error: Error?) -> Void)) {
        authenticateUserWithRequestBuilder(userId: userId, pw: pw, password: password).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Authenticates a user.
     - POST /Users/{userId}/Authenticate
     - 

     - examples: [{contentType=application/json, example={
  "User" : "",
  "ServerId" : "ServerId",
  "AccessToken" : "AccessToken",
  "SessionInfo" : ""
}}]
     - parameter userId: (path) The user id. 
     - parameter pw: (query) The password as plain text. 
     - parameter password: (query) The password sha1-hash. (optional)

     - returns: RequestBuilder<AuthenticationResult> 
     */
    open class func authenticateUserWithRequestBuilder(userId: UUID, pw: String, password: String? = nil) -> RequestBuilder<AuthenticationResult> {
        var path = "/Users/{userId}/Authenticate"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "pw": pw, 
                        "password": password
        ])


        let requestBuilder: RequestBuilder<AuthenticationResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Authenticates a user by name.

     - parameter body: (body) The M:Jellyfin.Api.Controllers.UserController.AuthenticateUserByName(Jellyfin.Api.Models.UserDtos.AuthenticateUserByName) request. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authenticateUserByName(body: UsersAuthenticateByNameBody, completion: @escaping ((_ data: AuthenticationResult?,_ error: Error?) -> Void)) {
        authenticateUserByNameWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Authenticates a user by name.
     - POST /Users/AuthenticateByName
     - 

     - examples: [{contentType=application/json, example={
  "User" : "",
  "ServerId" : "ServerId",
  "AccessToken" : "AccessToken",
  "SessionInfo" : ""
}}]
     - parameter body: (body) The M:Jellyfin.Api.Controllers.UserController.AuthenticateUserByName(Jellyfin.Api.Models.UserDtos.AuthenticateUserByName) request. 

     - returns: RequestBuilder<AuthenticationResult> 
     */
    open class func authenticateUserByNameWithRequestBuilder(body: UsersAuthenticateByNameBody) -> RequestBuilder<AuthenticationResult> {
        let path = "/Users/AuthenticateByName"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AuthenticationResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Authenticates a user with quick connect.

     - parameter body: (body) The Jellyfin.Api.Models.UserDtos.QuickConnectDto request. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authenticateWithQuickConnect(body: UsersAuthenticateWithQuickConnectBody, completion: @escaping ((_ data: AuthenticationResult?,_ error: Error?) -> Void)) {
        authenticateWithQuickConnectWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Authenticates a user with quick connect.
     - POST /Users/AuthenticateWithQuickConnect
     - 

     - examples: [{contentType=application/json, example={
  "User" : "",
  "ServerId" : "ServerId",
  "AccessToken" : "AccessToken",
  "SessionInfo" : ""
}}]
     - parameter body: (body) The Jellyfin.Api.Models.UserDtos.QuickConnectDto request. 

     - returns: RequestBuilder<AuthenticationResult> 
     */
    open class func authenticateWithQuickConnectWithRequestBuilder(body: UsersAuthenticateWithQuickConnectBody) -> RequestBuilder<AuthenticationResult> {
        let path = "/Users/AuthenticateWithQuickConnect"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AuthenticationResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Creates a user.

     - parameter body: (body) The create user by name request body. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createUserByName(body: UsersNewBody, completion: @escaping ((_ data: UserDto?,_ error: Error?) -> Void)) {
        createUserByNameWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates a user.
     - POST /Users/New
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - examples: [{contentType=application/json, example={
  "Policy" : "",
  "HasConfiguredEasyPassword" : true,
  "EnableAutoLogin" : true,
  "Configuration" : "",
  "LastLoginDate" : "2000-01-23T04:56:07.000+00:00",
  "PrimaryImageTag" : "PrimaryImageTag",
  "Name" : "Name",
  "ServerId" : "ServerId",
  "HasConfiguredPassword" : true,
  "ServerName" : "ServerName",
  "LastActivityDate" : "2000-01-23T04:56:07.000+00:00",
  "PrimaryImageAspectRatio" : 0.8008281904610115,
  "Id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "HasPassword" : true
}}]
     - parameter body: (body) The create user by name request body. 

     - returns: RequestBuilder<UserDto> 
     */
    open class func createUserByNameWithRequestBuilder(body: UsersNewBody) -> RequestBuilder<UserDto> {
        let path = "/Users/New"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserDto>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Deletes a user.

     - parameter userId: (path) The user id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUser(userId: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteUserWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Deletes a user.
     - DELETE /Users/{userId}
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter userId: (path) The user id. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserWithRequestBuilder(userId: UUID) -> RequestBuilder<Void> {
        var path = "/Users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Initiates the forgot password process for a local user.

     - parameter body: (body) The forgot password request containing the entered username. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func forgotPassword(body: UsersForgotPasswordBody, completion: @escaping ((_ data: ForgotPasswordResult?,_ error: Error?) -> Void)) {
        forgotPasswordWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Initiates the forgot password process for a local user.
     - POST /Users/ForgotPassword
     - 

     - examples: [{contentType=application/json, example={
  "Action" : "",
  "PinExpirationDate" : "2000-01-23T04:56:07.000+00:00",
  "PinFile" : "PinFile"
}}]
     - parameter body: (body) The forgot password request containing the entered username. 

     - returns: RequestBuilder<ForgotPasswordResult> 
     */
    open class func forgotPasswordWithRequestBuilder(body: UsersForgotPasswordBody) -> RequestBuilder<ForgotPasswordResult> {
        let path = "/Users/ForgotPassword"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ForgotPasswordResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Redeems a forgot password pin.

     - parameter body: (body) The forgot password pin request containing the entered pin. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func forgotPasswordPin(body: ForgotPasswordPinBody, completion: @escaping ((_ data: PinRedeemResult?,_ error: Error?) -> Void)) {
        forgotPasswordPinWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Redeems a forgot password pin.
     - POST /Users/ForgotPassword/Pin
     - 

     - examples: [{contentType=application/json, example={
  "UsersReset" : [ "UsersReset", "UsersReset" ],
  "Success" : true
}}]
     - parameter body: (body) The forgot password pin request containing the entered pin. 

     - returns: RequestBuilder<PinRedeemResult> 
     */
    open class func forgotPasswordPinWithRequestBuilder(body: ForgotPasswordPinBody) -> RequestBuilder<PinRedeemResult> {
        let path = "/Users/ForgotPassword/Pin"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PinRedeemResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Gets the user based on auth token.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCurrentUser(completion: @escaping ((_ data: UserDto?,_ error: Error?) -> Void)) {
        getCurrentUserWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the user based on auth token.
     - GET /Users/Me
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - examples: [{contentType=application/json, example={
  "Policy" : "",
  "HasConfiguredEasyPassword" : true,
  "EnableAutoLogin" : true,
  "Configuration" : "",
  "LastLoginDate" : "2000-01-23T04:56:07.000+00:00",
  "PrimaryImageTag" : "PrimaryImageTag",
  "Name" : "Name",
  "ServerId" : "ServerId",
  "HasConfiguredPassword" : true,
  "ServerName" : "ServerName",
  "LastActivityDate" : "2000-01-23T04:56:07.000+00:00",
  "PrimaryImageAspectRatio" : 0.8008281904610115,
  "Id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "HasPassword" : true
}}]

     - returns: RequestBuilder<UserDto> 
     */
    open class func getCurrentUserWithRequestBuilder() -> RequestBuilder<UserDto> {
        let path = "/Users/Me"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserDto>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets a list of publicly visible users for display on a login screen.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPublicUsers(completion: @escaping ((_ data: [UserDto]?,_ error: Error?) -> Void)) {
        getPublicUsersWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a list of publicly visible users for display on a login screen.
     - GET /Users/Public
     - 

     - examples: [{contentType=application/json, example=[ {
  "Policy" : "",
  "HasConfiguredEasyPassword" : true,
  "EnableAutoLogin" : true,
  "Configuration" : "",
  "LastLoginDate" : "2000-01-23T04:56:07.000+00:00",
  "PrimaryImageTag" : "PrimaryImageTag",
  "Name" : "Name",
  "ServerId" : "ServerId",
  "HasConfiguredPassword" : true,
  "ServerName" : "ServerName",
  "LastActivityDate" : "2000-01-23T04:56:07.000+00:00",
  "PrimaryImageAspectRatio" : 0.8008281904610115,
  "Id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "HasPassword" : true
}, {
  "Policy" : "",
  "HasConfiguredEasyPassword" : true,
  "EnableAutoLogin" : true,
  "Configuration" : "",
  "LastLoginDate" : "2000-01-23T04:56:07.000+00:00",
  "PrimaryImageTag" : "PrimaryImageTag",
  "Name" : "Name",
  "ServerId" : "ServerId",
  "HasConfiguredPassword" : true,
  "ServerName" : "ServerName",
  "LastActivityDate" : "2000-01-23T04:56:07.000+00:00",
  "PrimaryImageAspectRatio" : 0.8008281904610115,
  "Id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "HasPassword" : true
} ]}]

     - returns: RequestBuilder<[UserDto]> 
     */
    open class func getPublicUsersWithRequestBuilder() -> RequestBuilder<[UserDto]> {
        let path = "/Users/Public"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[UserDto]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets a user by Id.

     - parameter userId: (path) The user id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserById(userId: UUID, completion: @escaping ((_ data: UserDto?,_ error: Error?) -> Void)) {
        getUserByIdWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a user by Id.
     - GET /Users/{userId}
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - examples: [{contentType=application/json, example={
  "Policy" : "",
  "HasConfiguredEasyPassword" : true,
  "EnableAutoLogin" : true,
  "Configuration" : "",
  "LastLoginDate" : "2000-01-23T04:56:07.000+00:00",
  "PrimaryImageTag" : "PrimaryImageTag",
  "Name" : "Name",
  "ServerId" : "ServerId",
  "HasConfiguredPassword" : true,
  "ServerName" : "ServerName",
  "LastActivityDate" : "2000-01-23T04:56:07.000+00:00",
  "PrimaryImageAspectRatio" : 0.8008281904610115,
  "Id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "HasPassword" : true
}}]
     - parameter userId: (path) The user id. 

     - returns: RequestBuilder<UserDto> 
     */
    open class func getUserByIdWithRequestBuilder(userId: UUID) -> RequestBuilder<UserDto> {
        var path = "/Users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserDto>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets a list of users.

     - parameter isHidden: (query) Optional filter by IsHidden&#x3D;true or false. (optional)
     - parameter isDisabled: (query) Optional filter by IsDisabled&#x3D;true or false. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsers(isHidden: Bool? = nil, isDisabled: Bool? = nil, completion: @escaping ((_ data: [UserDto]?,_ error: Error?) -> Void)) {
        getUsersWithRequestBuilder(isHidden: isHidden, isDisabled: isDisabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a list of users.
     - GET /Users
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - examples: [{contentType=application/json, example=[ {
  "Policy" : "",
  "HasConfiguredEasyPassword" : true,
  "EnableAutoLogin" : true,
  "Configuration" : "",
  "LastLoginDate" : "2000-01-23T04:56:07.000+00:00",
  "PrimaryImageTag" : "PrimaryImageTag",
  "Name" : "Name",
  "ServerId" : "ServerId",
  "HasConfiguredPassword" : true,
  "ServerName" : "ServerName",
  "LastActivityDate" : "2000-01-23T04:56:07.000+00:00",
  "PrimaryImageAspectRatio" : 0.8008281904610115,
  "Id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "HasPassword" : true
}, {
  "Policy" : "",
  "HasConfiguredEasyPassword" : true,
  "EnableAutoLogin" : true,
  "Configuration" : "",
  "LastLoginDate" : "2000-01-23T04:56:07.000+00:00",
  "PrimaryImageTag" : "PrimaryImageTag",
  "Name" : "Name",
  "ServerId" : "ServerId",
  "HasConfiguredPassword" : true,
  "ServerName" : "ServerName",
  "LastActivityDate" : "2000-01-23T04:56:07.000+00:00",
  "PrimaryImageAspectRatio" : 0.8008281904610115,
  "Id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "HasPassword" : true
} ]}]
     - parameter isHidden: (query) Optional filter by IsHidden&#x3D;true or false. (optional)
     - parameter isDisabled: (query) Optional filter by IsDisabled&#x3D;true or false. (optional)

     - returns: RequestBuilder<[UserDto]> 
     */
    open class func getUsersWithRequestBuilder(isHidden: Bool? = nil, isDisabled: Bool? = nil) -> RequestBuilder<[UserDto]> {
        let path = "/Users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "isHidden": isHidden, 
                        "isDisabled": isDisabled
        ])


        let requestBuilder: RequestBuilder<[UserDto]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Updates a user.

     - parameter body: (body) The updated user model. 
     - parameter userId: (path) The user id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUser(body: UsersUserIdBody, userId: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateUserWithRequestBuilder(body: body, userId: userId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates a user.
     - POST /Users/{userId}
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter body: (body) The updated user model. 
     - parameter userId: (path) The user id. 

     - returns: RequestBuilder<Void> 
     */
    open class func updateUserWithRequestBuilder(body: UsersUserIdBody, userId: UUID) -> RequestBuilder<Void> {
        var path = "/Users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Updates a user configuration.

     - parameter body: (body) The new user configuration. 
     - parameter userId: (path) The user id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUserConfiguration(body: UserIdConfigurationBody, userId: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateUserConfigurationWithRequestBuilder(body: body, userId: userId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates a user configuration.
     - POST /Users/{userId}/Configuration
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter body: (body) The new user configuration. 
     - parameter userId: (path) The user id. 

     - returns: RequestBuilder<Void> 
     */
    open class func updateUserConfigurationWithRequestBuilder(body: UserIdConfigurationBody, userId: UUID) -> RequestBuilder<Void> {
        var path = "/Users/{userId}/Configuration"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Updates a user's easy password.

     - parameter body: (body) The M:Jellyfin.Api.Controllers.UserController.UpdateUserEasyPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserEasyPassword) request. 
     - parameter userId: (path) The user id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUserEasyPassword(body: UserIdEasyPasswordBody, userId: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateUserEasyPasswordWithRequestBuilder(body: body, userId: userId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates a user's easy password.
     - POST /Users/{userId}/EasyPassword
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter body: (body) The M:Jellyfin.Api.Controllers.UserController.UpdateUserEasyPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserEasyPassword) request. 
     - parameter userId: (path) The user id. 

     - returns: RequestBuilder<Void> 
     */
    open class func updateUserEasyPasswordWithRequestBuilder(body: UserIdEasyPasswordBody, userId: UUID) -> RequestBuilder<Void> {
        var path = "/Users/{userId}/EasyPassword"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Updates a user's password.

     - parameter body: (body) The M:Jellyfin.Api.Controllers.UserController.UpdateUserPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserPassword) request. 
     - parameter userId: (path) The user id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUserPassword(body: UserIdPasswordBody, userId: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateUserPasswordWithRequestBuilder(body: body, userId: userId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates a user's password.
     - POST /Users/{userId}/Password
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter body: (body) The M:Jellyfin.Api.Controllers.UserController.UpdateUserPassword(System.Guid,Jellyfin.Api.Models.UserDtos.UpdateUserPassword) request. 
     - parameter userId: (path) The user id. 

     - returns: RequestBuilder<Void> 
     */
    open class func updateUserPasswordWithRequestBuilder(body: UserIdPasswordBody, userId: UUID) -> RequestBuilder<Void> {
        var path = "/Users/{userId}/Password"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Updates a user policy.

     - parameter body: (body) The new user policy. 
     - parameter userId: (path) The user id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUserPolicy(body: UserIdPolicyBody, userId: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateUserPolicyWithRequestBuilder(body: body, userId: userId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates a user policy.
     - POST /Users/{userId}/Policy
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter body: (body) The new user policy. 
     - parameter userId: (path) The user id. 

     - returns: RequestBuilder<Void> 
     */
    open class func updateUserPolicyWithRequestBuilder(body: UserIdPolicyBody, userId: UUID) -> RequestBuilder<Void> {
        var path = "/Users/{userId}/Policy"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
