//
// ItemUpdateAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ItemUpdateAPI {
    /**
     Gets metadata editor info for an item.

     - parameter itemId: (path) The item id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMetadataEditorInfo(itemId: UUID, completion: @escaping ((_ data: MetadataEditorInfo?,_ error: Error?) -> Void)) {
        getMetadataEditorInfoWithRequestBuilder(itemId: itemId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets metadata editor info for an item.
     - GET /Items/{itemId}/MetadataEditor
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - examples: [{contentType=application/json, example={
  "ParentalRatingOptions" : [ {
    "Value" : 0,
    "Name" : "Name"
  }, {
    "Value" : 0,
    "Name" : "Name"
  } ],
  "ContentType" : "ContentType",
  "Countries" : [ {
    "TwoLetterISORegionName" : "TwoLetterISORegionName",
    "ThreeLetterISORegionName" : "ThreeLetterISORegionName",
    "DisplayName" : "DisplayName",
    "Name" : "Name"
  }, {
    "TwoLetterISORegionName" : "TwoLetterISORegionName",
    "ThreeLetterISORegionName" : "ThreeLetterISORegionName",
    "DisplayName" : "DisplayName",
    "Name" : "Name"
  } ],
  "Cultures" : [ {
    "ThreeLetterISOLanguageNames" : [ "ThreeLetterISOLanguageNames", "ThreeLetterISOLanguageNames" ],
    "ThreeLetterISOLanguageName" : "ThreeLetterISOLanguageName",
    "DisplayName" : "DisplayName",
    "Name" : "Name",
    "TwoLetterISOLanguageName" : "TwoLetterISOLanguageName"
  }, {
    "ThreeLetterISOLanguageNames" : [ "ThreeLetterISOLanguageNames", "ThreeLetterISOLanguageNames" ],
    "ThreeLetterISOLanguageName" : "ThreeLetterISOLanguageName",
    "DisplayName" : "DisplayName",
    "Name" : "Name",
    "TwoLetterISOLanguageName" : "TwoLetterISOLanguageName"
  } ],
  "ExternalIdInfos" : [ {
    "Type" : "",
    "Key" : "Key",
    "Name" : "Name",
    "UrlFormatString" : "UrlFormatString"
  }, {
    "Type" : "",
    "Key" : "Key",
    "Name" : "Name",
    "UrlFormatString" : "UrlFormatString"
  } ],
  "ContentTypeOptions" : [ {
    "Value" : "Value",
    "Name" : "Name"
  }, {
    "Value" : "Value",
    "Name" : "Name"
  } ]
}}]
     - parameter itemId: (path) The item id. 

     - returns: RequestBuilder<MetadataEditorInfo> 
     */
    open class func getMetadataEditorInfoWithRequestBuilder(itemId: UUID) -> RequestBuilder<MetadataEditorInfo> {
        var path = "/Items/{itemId}/MetadataEditor"
        let itemIdPreEscape = "\(itemId)"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<MetadataEditorInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Updates an item.

     - parameter body: (body) The new item properties. 
     - parameter itemId: (path) The item id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateItem(body: ItemsItemIdBody, itemId: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateItemWithRequestBuilder(body: body, itemId: itemId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates an item.
     - POST /Items/{itemId}
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter body: (body) The new item properties. 
     - parameter itemId: (path) The item id. 

     - returns: RequestBuilder<Void> 
     */
    open class func updateItemWithRequestBuilder(body: ItemsItemIdBody, itemId: UUID) -> RequestBuilder<Void> {
        var path = "/Items/{itemId}"
        let itemIdPreEscape = "\(itemId)"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Updates an item's content type.

     - parameter itemId: (path) The item id. 
     - parameter contentType: (query) The content type of the item. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateItemContentType(itemId: UUID, contentType: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateItemContentTypeWithRequestBuilder(itemId: itemId, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates an item's content type.
     - POST /Items/{itemId}/ContentType
     - 

     - API Key:
       - type: apiKey X-Emby-Authorization 
       - name: CustomAuthentication
     - parameter itemId: (path) The item id. 
     - parameter contentType: (query) The content type of the item. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateItemContentTypeWithRequestBuilder(itemId: UUID, contentType: String? = nil) -> RequestBuilder<Void> {
        var path = "/Items/{itemId}/ContentType"
        let itemIdPreEscape = "\(itemId)"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "contentType": contentType
        ])


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
